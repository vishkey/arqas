{
    "contents" : "#' Define a queueing model\n#'\n#' Constructor for \\code{MarkovianModel} class.\n#'\n#' @param arrdistr Arrival distribution (object of S4-class \\code{distr} \n#' defined in \\pkg{distr} package)\n#' @param serviceDistribution Service distribution (object of S4-class \\code{distr} \n#' defined in \\pkg{distr} package)\n#' @return \n#' An object of class \\code{MarkovianModel}, a list with the following components:\n#' \\item{arrivalDistribution}{Arrival distribution}\n#' \\item{serviceDistribution}{Service distribution}\n#' @export\nMarkovianModel <- function (arrivalDistribution = Exp(1), serviceDistribution = Exp(1)) {\n  packagearr <- attr(class(arrivalDistribution), \"package\")\n  packageserv <- attr(class(serviceDistribution), \"package\")\n  if (is.null(packagearr) || packagearr != \"distr\") stop(\"Argument 'arrivalDistribution' must be a valid Class of the Distr package\")\n  if (is.null(packageserv)|| packageserv!= \"distr\") stop(\"Argument 'serviceDistribution'must be a valid Class of the Distr package\")\n  \n  obj <- list(arrivalDistribution=arrivalDistribution, serviceDistribution=serviceDistribution)\n  oldClass(obj) <- \"MarkovianModel\"\n  return(obj)\n}\n\n#' Distribution function of the waiting time in the system\n#' \n#' Returns the value of the cumulative distribution function of the waiting time in the system\n#' for a queueing model\n#' \\deqn{W(x) = P(W \\le x)}\n#' \n#' @param qm Queueing model\n#' @param x Time\n#' @return \\deqn{W(x)}\n#' @export\nFW <- function(qm, x) {UseMethod(\"FW\", qm)}\n\n#'  Distribution function of the waiting time in the queue\n#'  \n#'  Returns the value of the cumulative distribution function of waiting time in the queue\n#'  \\deqn{W_{q} = P(W_{q} \\le x)}\n#'  \n#'  @param qm Queueing model\n#'  @param x Time\n#'  @return \\deqn{W_{q}(x)}\n#'  @export\nFWq <- function(qm, x) {UseMethod(\"FWq\", qm)}\n\n#' Steady-state probability of having n customers in the system\n#' \n#' Returns the probability of having n customers in the given queueing model\n#' \n#' @param qm Queueing model\n#' @param n Customers\n#' @return \\deqn{P(n)}\n#' @export\nPn <- function(qm, n) {UseMethod(\"Pn\", qm)}\n\n#' Steady-state probability of finding n customers in the system when a new customer arrives\n#' \n#' Returns the probability of n customers in the system in the moment of the\n#' arrival of a customer.\n#' \n#' @param qm Queueing model\n#' @param n Customers\n#' @return \\deqn{Q(n)}\n#' @export\nQn <- function(qm, n) {UseMethod(\"Qn\", qm)}\n\n#' Steady-state probability of 0 customers in the system on the node i of an Open Jackson Network.\n#' \n#' Returns the value of the probability of 0 customers in node i of an Open Jackson Network.\n#' \n#' @param net Network\n#' @param i Node\n#' @return \\deqn{P_{0,i}()}\nP0i <- function(net, i) {UseMethod(\"P0i\", net)}\n\n#' Steady-state probability of i customers in the system on the node 0 of an Open Jackson Network.\n#' \n#' Returns the value of the probability of i customers in node 0 of an Open Jackson Network.\n#' \n#' @param net Network\n#' @param i Customers\n#' @return \\eqn{P_{i,0}()}\n#' @keywords internal\nPi0 <- function(net, i) {UseMethod(\"Pi0\", net)}\n\n#' Returns the queueing model which corresponds to the node i of the network\n#' \n#' @param net Network\n#' @param i Node\n#' @return \\code{MarkovianModel} object\n#' @export\nnode <- function(net, i) {UseMethod(\"node\", net)}\n\n#' Steady-state probability of n customers in the node i of a network.\n#' \n#' Returns the value \\eqn{P_{i}(n)} in the node i of a network\n#' \n#' @param net Network\n#' @param n Customers\n#' @param node Node\n#' @return P(n) in the selected node\n#' @export\nPi <- function(net, n, node) {UseMethod(\"Pi\", net)}\n\n\n#' @rdname FW\n#' @method FW MarkovianModel\n#' @details\n#' \\code{FW.MarkovianModel} implements the default method (generates a message)\n#' @export\nFW.MarkovianModel <- function(qm, x) {stop(simpleError(\"W(t): Model not defined\"))}\n\n#' @rdname FWq\n#' @method FWq MarkovianModel\n#' @details\n#' \\code{FWq.MarkovianModel} implements the default method (generates a message)\n#' @export\nFWq.MarkovianModel <- function(qm, x) {stop(simpleError(\"Wq(t): Model not defined\"))}\n\n#' @rdname Pn\n#' @method Pn MarkovianModel\n#' @details\n#' \\code{Pn.MarkovianModel} implements the default method (generates a message)\n#' @export\nPn.MarkovianModel <- function(qm, n) {stop(simpleError(\"Pn(t): Model not defined\"))}\n\n#' @rdname Qn\n#' @method Qn MarkovianModel\n#' @details\n#' \\code{Qn.MarkovianModel} implements the default method (generates a message).\n#' @export\nQn.MarkovianModel <- function(qm, n) {stop(simpleError(\"Qn(t): Model not defined\"))}\n\n#' Print the main characteristics of a queueing model\n#' @param x MarkovianModel object\n#' @param ... Further arguments passed to or from other methods.\n#' @method print MarkovianModel\n#' @keywords internal\n#' @export\nprint.MarkovianModel <- function(x, ...) {\n  cat(\"Model: \", class(x)[1])\n  cat(\"\\nL =\\t\", x$out$l, \"\\tW =\\t\", x$out$w, \"\\t\\tIntensidad =\\t\", x$out$rho , \"\\n\")\n  cat(\"Lq =\\t\", x$out$lq, \"\\tWq =\\t\", x$out$wq, \"\\tEficiencia =\\t\", x$out$eff, \"\\n\\n\")\n}\n\n#' List of export models to the UI\n#' @export\n#' @keywords internal\nuiList <- list()\n\n#' List of registered distributions to the UI\n#' @export\n#' @keywords internal\ndistrList <- list()\n\n#' Counter of exported funtions\n#' @keywords internal\nexportedFunctions <- 0\n\n#' Counter of registered distributions\n#' @keywords internal\nregisteredDistributions <- 0\n\n#' Exports a function to the UI\n#' \n#' @param fun Function of the model\n#' @param name Name of the model\n#' @param types Type of each parameter of the function (numerical, character, vector, matrix)\n#' @param class A string to agrupate funtions in the same menu option\n#' @export\nexportToUI <- function(fun, name, types, class) {\n  exportedFunctions <<- exportedFunctions + 1\n  \n  el <- list(id=exportedFunctions, name=name, fun=fun, types=types)\n  oldClass(el) <- class\n  uiList[[exportedFunctions]] <<- el\n}\n\n#' Register a distribution to the UI\n#' \n#' @param fun Function of the distribution\n#' @param name Name of the distribution\n#' @export\nregisterDistribution <- function(fun, name) {\n  registeredDistributions <<- registeredDistributions + 1\n  \n  el <- list(id=registeredDistributions, name=name, fun=fun)\n  distrList[[registeredDistributions]] <<- el\n}\n\nregisterDistribution(Exp, \"Exponential\")\nregisterDistribution(Beta, \"Beta\")\nregisterDistribution(Norm, \"Normal\")\nregisterDistribution(Weibull, \"Weibull\")\nregisterDistribution(Unif, \"Uniform\")\nregisterDistribution(Chisq, \"Chi Square\")\n\n#' Shows the main graphics of the parameters of a Markovian Model\n#' \n#' @param object Markovian Model\n#' @param t Range of t\n#' @param n Range of n\n#' @param ... Further arguments passed to or from other methods.\n#' @method summary MarkovianModel\n#' @export\nsummary.MarkovianModel <- function(object, t=list(range=seq(object$out$w, object$out$w*3, length.out=100)), n=c(0:5), ...) {\n  if (!is.null(t) && !is.null(n)) {\n      par(mfrow=c(2,1)) \n      summaryWtWqt(object, t, \"graphics\")\n      summaryPnQn(object, n, \"graphics\")\n  } else {\n    if (!is.null(t)) {\n        summaryWtWqt(object, t)\n    }\n    if (!is.null(n))  {\n        summaryPnQn(object, n)\n    }\n  }\n}\n\n#' Shows a plot of W(t) and Wq(t) values of a Markovian Model\n#' \n#' @param object Markovian Model\n#' @param t Range of t\n#' @param graphics Type of graphics: \"graphics\" use the basic R plot and \"ggplot2\" the library ggplot2\n#' @export\nsummaryWtWqt <- function(object, t, graphics=\"ggplot2\") {\n  try({\n    epsilon <- 0.001\n    \n    if (is.list(t)) {\n      searchvalues <- FW(object, t$range)\n      closeone <- t$range[which.min(1-searchvalues)]\n      t <- seq(0, closeone, 0.01)\n    }\n    data <- data.frame(t, \"W\"=FW(object, t), \"Wq\"=FWq(object, t))\n    switch(graphics,\n           \"graphics\" = {                  \n                  plot(data$t, data$W, col=\"red\", type=\"l\", ylim=c(0,1),  xlab=\"t\", ylab=\"W(t) & Wq(t)\", ann=FALSE)\n                  lines(data$t, data$Wq, col=\"blue\")\n                  legend(\"bottomright\", c(\"W\", \"Wq\"), lty =c(1,1), col = c(\"red\", \"blue\"), bty=\"n\")\n                  title(main=paste(\"Distribution functions of waiting times (t from \", data$t[1], \" to \", data$t[length(data$t)], \")\", sep=\"\"))\n           },\n           \"ggplot2\" = {\n                  data <- melt(data, id.var=\"t\") \n                  qplot(t, value, data=data, geom=\"line\", colour=variable, \n                        main=paste(\"Distribution functions of waiting times (t from \", data$t[1], \" to \", data$t[length(data$t)], \")\", sep=\"\"),\n                        ylab=\"Cumulative Probability\")\n           })\n  })\n}\n\n#' Shows a plot of P(n) and Q(n) values of a Markovian Model\n#' \n#' @param object Markovian Model\n#' @param n Range of n\n#' @param graphics Type of graphics: \"graphics\" use the basic R plot and \"ggplot2\" the library ggplot2\n#' @export\nsummaryPnQn <- function(object, n, graphics=\"ggplot2\") {\n  switch(graphics,\n         \"graphics\" = {\n              tryCatch({\n                barplot(rbind(Qn(object, n), Pn(object, n)), names.arg=n, col=c(\"blue\", \"red\"),  legend.text=c(\"Qn\", \"Pn\"), beside=TRUE)\n                legend(0, 0, legend=c(\"Qn\", \"Pn\"))\n              }, error=function(e) {\n                barplot(Pn(object, n), col=\"red\", legend.text=\"Pn\")\n              })\n              title(main=paste(\"Probability of n customers in the system (n from \", n[1], \" to \", n[length(n)], \")\", sep=\"\"))\n         },\n         \"ggplot2\" = {\n             tryCatch({\n               data <- melt(data.frame(n, \"Pn\"=Pn(object, n), \"Qn\"=Qn(object, n)), id.var=\"n\")\n              qplot(n, value, data=data, geom=\"bar\", stat=\"identity\", fill=variable, position=\"dodge\",\n                    main=paste(\"Probability of n customers (n from \", n[1], \" to \", n[length(n)], \")\", sep=\"\"),\n                    ylab=\"Probabilities\")\n             }, error= function(e) {\n                 data <- melt(data.frame(n, \"Pn\"=Pn(object, n)), id.var=\"n\")\n                 qplot(n, value, data=data, geom=\"bar\", stat=\"identity\", fill=variable,\n                       main=paste(\"Probability of n customers (n from \", n[1], \" to \", n[length(n)], \")\", sep=\"\"),\n                       ylab=\"Probability\")\n             })\n         })\n}\n\n#' Returns the maximun value for n that satisfies P(n) > 0\n#' \n#' @param qm object MarkovianModel\n#' @export\nmaxCustomers <- function(qm) {UseMethod(\"maxCustomers\", qm)}\n\n#' @rdname maxCustomers\n#' @method maxCustomers MarkovianModel\n#' @details\n#' \\code{maxCustomers.MarkovianModel} implements the default method. Returns infinite.\n#' @export\nmaxCustomers.MarkovianModel <- function(qm) {\n      return(Inf)\n}",
    "created" : 1375080681399.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2213635695",
    "id" : "4FB78F81",
    "lastKnownWriteTime" : 1385313756,
    "path" : "E:/Dropbox/ProyectoFC_Colas/VersionFinal/arqas/R/1_ModelsHeader.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}